<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee
                      https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd"
         version="6.0"
         metadata-complete="true">
    <!-- SpringMVC的前端控制器，对浏览器发送的请求进行统一的处理 -->
    <!-- <servlet> -->
    <!--     <servlet-name>SpringMVC</servlet-name> -->
    <!--     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> -->
    <!-- </servlet> -->
    <!-- <servlet-mapping> -->
    <!--     <servlet-name>SpringMVC</servlet-name> -->
    <!--     <url-pattern>/</url-pattern> -->
    <!-- </servlet-mapping> -->

    <!-- SpringMVC的前端控制器，对浏览器发送的请求进行统一的处理 -->
    <!-- SpringMVC的扩展配置 -->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--
            扩展初始化参数形式，指定SpringMVC的配置文件和名称
         -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springMVC.xml</param-value>
        </init-param>

        <!--
            作为核心框架组件，如果在请求时才进行大量的初始化操作
            会严重影响第一次请求的访问速度
            所以通过<load-on-startup>标签，将启动控制DispatcherServlet的初始化时间提前到服务器启动时
        -->
        <!-- 将此配置的初始化时间提前到服务器启动时 -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <!--
            设置springMVC的核心控制器所能处理的请求的请求路径
            /所匹配的请求可以是/login或.html或.js或.css方式的请求路径
            但是/不能匹配.jsp请求路径的请求
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>

